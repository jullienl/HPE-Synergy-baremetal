---

# Performing automated Windows Server 2022 Boot from SAN installation on Gen10 Synergy Module(s) using a kickstart and a HPE OneView Server Profile Template

- name: Performing an unattended Windows Server 2022 Boot from SAN installation on a Gen10 Synergy Module using a OneView Server Profile Template
  hosts: Windows
  collections:
    - hpe.oneview
  gather_facts: no
  vars_files:
    - vars/WIN_provisioning.yml
    #- vars/encrypted_credentials.yml
  vars:
    # HPE Synergy Composer configuration
    - config: "{{ playbook_dir }}/oneview_config.json"

    - inventory_fqdn: "{{ inventory_hostname | lower }}.{{ domain }}"

    - ansible_python_interpreter: python3
    - ansible_host_key_checking: false
    - validate_certs: false

  tasks: 

# Staging the Windows Server ISO on Ansible Controller

    - name: Checking if Windows Server ISO file exists on "{{lookup("pipe","hostname")}}"
      stat:
        path: "{{ src_iso_directory }}/{{ src_iso_file }}"
      register: p
      delegate_to: localhost

    - name: Creating the directory "{{ src_iso_directory }}" to host the ISO file on "{{ lookup("pipe","hostname") }}"
      file:
        path: "{{ src_iso_directory }}"
        state: directory
      delegate_to: localhost

    - name: Downloading file "{{ src_iso_file }}" to "{{ lookup("pipe","hostname") }}" if not present
      get_url:
        url: "{{ src_iso_url }}/{{ src_iso_file }}"
        dest: "{{ src_iso_directory }}"
        validate_certs: no
      when: p.stat.exists == False
      delegate_to: localhost      

    - name: Checking if Windows Server ISO file extraction is necessary on "{{ lookup("pipe","hostname") }}"
      stat:
        path: /opt/baremetal/{{ inventory_hostname }}
      register: p
      delegate_to: localhost     

    - name: Creating /mnt/{{ inventory_hostname }} on "{{lookup("pipe","hostname")}}" if it does not exist
      file:
        path: /mnt/{{ inventory_hostname }}
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Creating /opt/baremetal/{{ inventory_hostname }}/ on "{{lookup("pipe","hostname")}}" if it does not exist
      file:
        path: /opt/baremetal/{{ inventory_hostname }}
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Mounting Windows Server ISO and copying ISO files to /opt/baremetal/{{ inventory_hostname }}/ on "{{lookup("pipe","hostname")}}"
      shell: |
        mount -o loop {{ src_iso_directory }}/{{ src_iso_file }} /mnt/{{ inventory_hostname }}/
        cp -r /mnt/{{ inventory_hostname }}/. /opt/baremetal/{{ inventory_hostname }}/
        umount /mnt/{{ inventory_hostname }}
      args:
        warn: false # To prevent warning
      when: p.stat.exists == False
      delegate_to: localhost      

# Creating $OEM$ resources to host the different scripts that we need to run at startup

    - name: Creating $OEM$ on "{{lookup("pipe","hostname")}}" in /opt/baremetal/{{ inventory_hostname }}/sources to run scripts at startup
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0775
      loop:
        - /opt/baremetal/{{ inventory_hostname }}/sources/$OEM$
        - /opt/baremetal/{{ inventory_hostname }}/sources/$OEM$/$1
        - /opt/baremetal/{{ inventory_hostname }}/sources/$OEM$/$1/Temp
        - /opt/baremetal/{{ inventory_hostname }}/sources/$OEM$/$$
        - /opt/baremetal/{{ inventory_hostname }}/sources/$OEM$/$$/Setup
        - /opt/baremetal/{{ inventory_hostname }}/sources/$OEM$/$$/Setup/Scripts
      delegate_to: localhost

    - name: Download POSH script from GitHub to configure Windows for remote management with Ansible 
      get_url:
        url: https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1
        dest: /opt/baremetal/{{ inventory_hostname }}/sources/$OEM$/$1/Temp/winRM.ps1
        mode: '0775'  
      delegate_to: localhost

# Creating a Server Profile in HPE OneView from a boot from SAN Server Profile Template:

    - name: Creating Server Profile "{{ inventory_hostname }}" from Server Profile Template "{{ server_template }}"
      oneview_server_profile:
        config: "{{ config }}"
        data:
          serverProfileTemplateName: "{{ server_template }}"
          name: "{{ inventory_hostname }}"
        # serverHardwareUri: "/rest/server-hardware/39313738-3234-584D-5138-323830343848"
        # server_hardware: Encl1, bay 12
        # If any hardware is provided, it tries to get one available
      delegate_to: localhost
      register: result

    - name: Capturing information for the customization of the kickstart file [server generation - MAC of first management NIC - LUN uri of the primary boot volume]
      set_fact:
        server_hardware_name: "{{ server_hardware.name }}"
        generation: "{{ server_hardware.generation }}"
        lunuri: "{{ (server_profile.sanStorage.volumeAttachments | selectattr('bootVolumePriority', 'equalto', 'Primary') | map(attribute='volumeUri') | list)[0] }}"
        mac1: "{{ (server_profile.connectionSettings.connections | selectattr('id', 'equalto', 1) | map(attribute='mac') | list)[0] }}"
        mac2: "{{ (server_profile.connectionSettings.connections | selectattr('id', 'equalto', 2) | map(attribute='mac') | list)[0] }}"

#     #- debug: var=server_profile
#     #- debug: var=serial_number
#     #- debug: var=server_hardware
#     #- debug: var=compliance_preview
#     #- debug: var=created

#     #- debug: var=generation
#     #- debug: var=lunuri
#     #- debug: var=mac1 

    - name: Showing the result of the Server Profile creation task
      debug:
        msg: "Hardware selected: {{ server_hardware_name }} - Result: {{ result.msg }}"

    - name: Collecting volumes information
      oneview_volume_facts:
        config: "{{ config }}"
      delegate_to: localhost

    #- debug: var=storage_volumes
      
    - name: Capturing boot LUN size defined in the Server Profile to ensure that Windows Server will be installed on this disk using the kickstart file
      set_fact:
        size: "{{ ((storage_volumes | selectattr('uri', 'equalto', lunuri) | map(attribute='provisionedCapacity') | list)[0] | int / (1024*1024*1024) ) |int}}"

    # - debug: var=size

# Creation of the SetupComplete.cmd to configure the network settings

    - name: Creating configure_network.ps1 that will be launched by SetupComplete.cmd (creation of a team using the first two NICs and configuration of IP parameters)
      copy:
        force: true
        dest: /opt/baremetal/{{ inventory_hostname }}/sources/$OEM$/$$/Setup/Scripts/configure_network.ps1
        content: |
          $mac1="{{ mac1 }}"
          $net1=get-netadapter | where MacAddress -eq $mac1.replace(":","-") | select name
          $mac2="{{ mac2 }}"
          $net2=get-netadapter | where MacAddress -eq $mac2.replace(":","-") | select name
          New-NetLbfoTeam -Name mgmt_nw_team -TeamMembers $net1.name,$net2.name -confirm:$false
          netsh interface ip set address mgmt_nw_team static "{{host_management_ip}}" "{{netmask}}" "{{gateway}}" 1 
          netsh interface ip add dns mgmt_nw_team "{{nameserver1}}"
          netsh interface ip add dns mgmt_nw_team "{{nameserver2}}" index=2
          $team_index = Get-NetAdapter -Name mgmt_nw_team | % ifindex
          Set-DnsClient -InterfaceIndex $team_index -ConnectionSpecificSuffix "{{domain}}" -RegisterThisConnectionsAddress $true -UseSuffixWhenRegistering $true
      delegate_to: localhost      

    - name: Creating SetupComplete.cmd for the network settings
      # SetupComplete.cmd automatically runs after the Windows Setup process
      # Windows Setup logs the action in the C:\Windows\Panther\UnattendGC\Setupact.log file
      copy:
        force: true
        dest: /opt/baremetal/{{ inventory_hostname }}/sources/$OEM$/$$/Setup/Scripts/SetupComplete.cmd
        content: |        
          Powershell.exe -ExecutionPolicy Bypass -File "%SYSTEMROOT%/Setup/Scripts/configure_network.ps1" -WindowStyle Hidden > "%SYSTEMROOT%\Panther\UnattendGC\setupcomplete.log" 2>&1
      delegate_to: localhost          

# Creation of the new Windows Server ISO image with unattended installation

    - name: Updating autounattend.xml file 
      template:
        src: files/{{ windows_version }}/{{ unattend }}
        dest: /opt/baremetal/{{ inventory_hostname }}
      delegate_to: localhost
  
    - name: Creating customized bootable ISO 
      shell: >
        mkisofs 
        --allow-limited-size 
        -no-emul-boot 
        -b "boot/etfsboot.com" 
        -boot-load-seg 0 
        -boot-load-size 8 
        -eltorito-alt-boot 
        -no-emul-boot 
        -e "efi/microsoft/boot/efisys_noprompt.bin" 
        -boot-load-size 1 
        -iso-level 4 
        -udf 
        -o /opt/baremetal/{{ inventory_hostname }}.iso
        /opt/baremetal/{{ inventory_hostname }}/
      delegate_to: localhost

    - name: Creating /usr/share/nginx/html/isos/ on "{{lookup("pipe","hostname")}}" if it does not exist
      file:
        path: /usr/share/nginx/html/isos/
        state: directory
        mode: '0755'
      delegate_to: localhost
  
    - name: Moving created ISO to the nginx default html folder of "{{ lookup("pipe","hostname") }}" 
      shell: |
        mv /opt/baremetal/{{ inventory_hostname }}.iso /usr/share/nginx/html/isos/
      delegate_to: localhost

# Starting the OS unattended installation

    - name: Powering on and booting "{{ server_hardware_name }}" from created ISO using iLO Virtual Media 
      community.general.hpilo_boot:
        host: "{{ server_hardware.mpHostInfo.mpIpAddresses[1].address }}" 
        login: Administrator
        password: password
        media: cdrom
        image: 'http://{{ lookup("pipe","hostname") }}/isos/{{ inventory_hostname }}.iso'
      delegate_to: localhost

    - name: Waiting for Windows Server installation to complete - Waiting for "{{ host_management_ip }}" to respond...
      wait_for: 
        timeout: 1500 
        host: "{{ host_management_ip }}"
        port: 3389
      register: boot_wait_time
      delegate_to: localhost
    
    - debug:
        msg: "{{ inventory_hostname }} installation took {{ (boot_wait_time.elapsed / 60) | round | int }} minutes"

# Cleaning up staging files

    - name: Deleting all temporary files in the stagging location on "{{lookup("pipe","hostname")}}" 
      file:
        path: "/opt/baremetal/{{ inventory_hostname }}"
        state: absent
      delegate_to: localhost

    - name: Deleting created ISO file in the web server directory on "{{lookup("pipe","hostname")}}" 
      file:
        path: "/usr/share/nginx/html/isos/{{ inventory_hostname }}.iso"
        state: absent
      delegate_to: localhost

    - name: Unmounting original ISO file on "{{lookup("pipe","hostname")}}" 
      file:
        path: "/mnt/{{ inventory_hostname }}"
        state: absent
      delegate_to: localhost

    - name: Collecting product_id found in install.xml file of the HPE iSUT package
      shell: |
        unzip -p files/{{ windows_version }}/{{ iSUT_package }} install.xml | grep "product id" | awk '{ print substr ($0, 16, 36 ) }'
      args:
        warn: false # To prevent warning
      register: iSUT_product_id  
      delegate_to: localhost

    - name: Collecting product_id found in install.xml file of the HPE AMS package
      shell: |
        unzip -p files/{{ windows_version }}/{{ AMS_package }} install.xml | grep "product id" | awk '{ print substr ($0, 16, 36 ) }'
      args:
        warn: false # To prevent warning
      register: AMS_product_id  
      delegate_to: localhost

      #- debug: msg='{{ iSUT_product_id.stdout }}'
      #- debug: msg='{{ AMS_product_id.stdout }}'

# Adding a DNS record for the newly provisioned server in the defined DNS server 

- name: Creating a DNS record for the bare metal Windows Server
  hosts: Windows
  gather_facts: no
  vars_files:
    - vars/WIN_provisioning.yml
    - vars/windows_dns.yml
    # - vars/encrypted_credentials.yml
  tasks:
    - name: Adding "{{ inventory_hostname }}" with "{{ host_management_ip }}" on "{{ dns_server }}" in "{{ domain }}" DNS domain
      community.windows.win_dns_record:
        name: "{{ inventory_hostname }}"
        type: "A"
        value: "{{ host_management_ip }}"
        zone: "{{ domain }}"
        state: present
      delegate_to: "{{ dns_server }}" 


# Installing iSUT and AMS on the server for online installation of HPE drivers for Windows Server

- name: Installing HPE iSUT and HPE AMS on the server for online installation of HPE drivers for Windows Server
  hosts: Windows
  collections:
    - hpe.oneview
  gather_facts: no
  vars_files:
    - vars/WIN_provisioning.yml
    # - vars/encrypted_credentials.yml
  vars:
  # HPE Synergy Composer configuration
   - config: "{{ playbook_dir }}/oneview_config.json"  
  
  tasks:

    - name: Copying HPE iSUT package file to {{ inventory_hostname }}
      win_copy:
        src: files/{{ windows_version }}/{{ iSUT_package }}
        dest: c:\Temp\sut.exe

    - name: Copying HPE AMS package file to {{ inventory_hostname }}
      win_copy:
        src: files/{{ windows_version }}/{{ AMS_package }}
        dest: c:\Temp\amsd.exe
     
    - name: Installing Integrated Smart Update Tools
      win_package:
        path: c:\Temp\sut.exe
        product_id: '{{ iSUT_product_id.stdout }}'
        arguments: /s
      register: SUT_install
      # failed_when is required because the installation of the package returns a false error.
      failed_when: "SUT_install.rc != 0 and SUT_install.rc != 1"

    - name: Installing HPE Agentless Management Service
      win_package:
        path: c:\Temp\amsd.exe 
        product_id: '{{ AMS_product_id.stdout }}'
        arguments: /s 
      register: AMS_install
      # failed_when is required because the installation of the package returns a false error.
      failed_when: "AMS_install.rc != 0 and AMS_install.rc != 1"
 
    - name: Configuring iSUT mode to allow OS driver updates via HPE OneView Server Profile
      win_shell: 
        sut.exe -set mode=autodeploy 
        #sut -set mode=AutoDeployReboot
        #sut -set mode=AutoStage
        #sut -set mode=OnDemand
      register: sut_status

    - debug: msg="{{ sut_status.stdout }}"

# Changing the OneView Server Profile to enable OS drivers installation using the SSP/SPP.    

    - name: Updating Server Profile to enable Firmware and OS Drivers using SUT
      oneview_server_profile:
        config: "{{ config }}"
        state: "present"
        data:
          name: "{{ inventory_hostname }}"
          firmware:
            firmwareInstallType: "FirmwareAndOSDrivers"
      delegate_to: localhost
      register: result

    - debug: msg="{{ result.msg }}"

# Joining Windows domain 

    - name: Joining domain {{ domain }}
      ansible.windows.win_domain_membership:
        dns_domain_name: "{{ domain }}"
        hostname: "{{ inventory_hostname }}"
        domain_admin_user: "{{ win_domain_admin_user }}"
        domain_admin_password: "{{ win_domain_admin_password }}"
        state: domain
      register: domain_state
 
# Waiting for HPE drivers to be installed

    - name: Monitoring SUT status for 'reboot the system' message
      oneview_server_hardware_facts:
        config: "{{ config }}"
        name: "{{ server_hardware.name }}"
      retries: 50
      delay: 30 
      until:  server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot"
      delegate_to: localhost

# Rebooting host for the HPE drivers/firmware activation

    - name: Rebooting host for the HPE drivers/firmware activation and waiting for it to restart
      win_reboot:
        msg: "Reboot initiated by Ansible"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami

    - name: Displaying install completed message
      debug: 
        msg: 
         - '{{ inventory_hostname }}.{{domain}} Installation completed !'
         - 'OS is configured and running with HPE OS drivers.'
