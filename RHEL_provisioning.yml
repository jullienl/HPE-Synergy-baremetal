---
# Performing automated RHEL 8.3 Boot from SAN installation on Gen10 Synergy Module(s) using a kickstart and a HPE OneView Server Profile Template

# Adding a DNS record for the server that will be provisioned in the defined DNS server

- name: Creating a DNS record for the bare metal RHEL server
  hosts: RHEL
  gather_facts: no
  vars_files:
    - vars/RHEL_provisioning.yml
    - vars/windows_dns.yml
    # - vars/encrypted_credentials.yml
  tasks:
    - name: Adding "{{ inventory_hostname }}" with "{{ host_management_ip }}" on "{{ dns_server }}" in "{{ domain }}" DNS domain
      community.windows.win_dns_record:
        name: "{{ inventory_hostname }}"
        type: "A"
        value: "{{ host_management_ip }}"
        zone: "{{ domain }}"
        state: present
      delegate_to: "{{ dns_server }}" 


- name: Performing an automated RHEL 8.3 Boot from SAN installation on a Gen10 Synergy Module using a kickstart and a OneView Server Profile Template
  hosts: RHEL
  collections:
    - hpe.oneview
  gather_facts: no
  vars_files:
    - vars/RHEL_provisioning.yml
    # - vars/encrypted_credentials.yml
  vars:
    # HPE Synergy Composer configuration
    - config: "{{ playbook_dir }}/oneview_config.json"

    - ansible_python_interpreter: python3
    - ansible_host_key_checking: false
    - validate_certs: false
    - ssh_known_hosts_file: "{{ lookup('env','HOME') + '/.ssh/known_hosts' }}" 
    - ansible_ssh_public_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

  tasks: 

# Staging the RHEL ISO on Ansible Controller 
    
    - name: Checking if RHEL ISO file exists on "{{lookup("pipe","hostname")}}"
      stat:
        path: "{{ src_iso_directory }}/{{ src_iso_file }}"
      register: p
      delegate_to: localhost

    - name: Creating the directory "{{ src_iso_directory }}" to host the ISO file on "{{lookup("pipe","hostname")}}"
      file:
        path: "{{ src_iso_directory }}"
        state: directory
      delegate_to: localhost

    - name: Downloading file "{{ src_iso_file }}" to "{{lookup("pipe","hostname")}}" if not present
      get_url:
        url: "{{ src_iso_url }}/{{ src_iso_file }}"
        dest: "{{ src_iso_directory }}"
        validate_certs: no
      when: p.stat.exists == False
      delegate_to: localhost

    - name: Collecting ISO label (can be required for some booltloader modifications)
      shell: isoinfo -i {{ src_iso_directory }}/{{ src_iso_file }} -d  | grep "Volume id" | awk '{ print substr ($0, 12 ) }'
      register: iso_info
      delegate_to: localhost

    - set_fact:
        iso_label={{ iso_info.stdout }}

    - name: Checking if RHEL ISO file extraction is necessary on "{{ inventory_hostname }}"
      stat:
        path: /opt/baremetal/{{ inventory_hostname }}
      register: p
      delegate_to: localhost

    - name: Creating /mnt/{{ inventory_hostname }} on "{{lookup("pipe","hostname")}}" if it does not exist
      file:
        path: /mnt/{{ inventory_hostname }}
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Creating /opt/baremetal/{{ inventory_hostname }}/ on "{{lookup("pipe","hostname")}}" if it does not exist
      file:
        path: /opt/baremetal/{{ inventory_hostname }}
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Mounting RHEL ISO and copying ISO files to /opt/baremetal/{{ inventory_hostname }}/ on "{{lookup("pipe","hostname")}}"
      shell: |
        mount -o loop -t iso9660 {{ src_iso_directory }}/{{ src_iso_file }} /mnt/{{ inventory_hostname }}/
        cp -r /mnt/{{ inventory_hostname }}/. /opt/baremetal/{{ inventory_hostname }}/
        umount /mnt/{{ inventory_hostname }}
      args:
        warn: false # To prevent warning
      when: p.stat.exists == False
      delegate_to: localhost      

# Modifying SYSLINUX and GRUB bootloaders for both legacy and UEFI implementations: 

    - name: Modifying legacy bios SYSLINUX bootloader for kickstart installation from CDROM
      shell: |
        sed -i '1,/quiet/s/quiet/quiet inst.ks=cdrom/' /opt/baremetal/{{ inventory_hostname }}/isolinux//isolinux.cfg
        sed -i '1,/600/{s/600/50/}' /opt/baremetal/{{ inventory_hostname }}/isolinux//isolinux.cfg
      args:
        warn: false # To prevent warning
      delegate_to: localhost

    - name: Modifying UEFI bootloader for kickstart installation from CDROM
      shell: |
        sed -i '1,/quiet/s/quiet/quiet inst.ks=cdrom/' /opt/baremetal/{{ inventory_hostname }}/EFI/BOOT/grub.cfg
        sed -i '1,/60/{s/60/5/}' /opt/baremetal/{{ inventory_hostname }}/EFI/BOOT/grub.cfg
        sed -i '1,/1/{s/1/0/}' /opt/baremetal/{{ inventory_hostname }}/EFI/BOOT/grub.cfg
      args:
        warn: false # To prevent warning
      delegate_to: localhost

# Creating a Server Profile in HPE OneView from a boot from SAN Server Profile Template:

    - name: Creating Server Profile "{{ inventory_hostname }}" from Server Profile Template "{{ server_template }}"
      oneview_server_profile:
        config: "{{ config }}"
        data:
          serverProfileTemplateName: "{{ server_template }}"
          name: "{{ inventory_hostname }}"
        # serverHardwareUri: "/rest/server-hardware/39313738-3234-584D-5138-323830343848"
        # server_hardware: Encl1, bay 12
        # If any hardware is provided, it tries to get one available
      delegate_to: localhost
      register: result

    - name: Capturing information for the customization of the kickstart file [server generation - MAC of first management NIC - LUN uri of the primary boot volume]
      set_fact:
        server_hardware_name: "{{ server_hardware.name }}"
        generation: "{{ server_hardware.generation }}"
        lunuri: "{{ (server_profile.sanStorage.volumeAttachments | selectattr('bootVolumePriority', 'equalto', 'Primary') | map(attribute='volumeUri') | list)[0] }}"
        mac: "{{ (server_profile.connectionSettings.connections | selectattr('id', 'equalto', 1) | map(attribute='mac') | list)[0] }}"

    #- debug: var=server_profile
    #- debug: var=serial_number
    #- debug: var=server_hardware
    #- debug: var=compliance_preview
    #- debug: var=created

    #- debug: var=generation
    #- debug: var=lunuri
    #- debug: var=mac 

    - name: Showing the result of the Server Profile creation task
      debug:
        msg: "Hardware selected: {{ server_hardware_name }} - Result: {{ result.msg }}"

    - name: Collecting volumes information
      oneview_volume_facts:
        config: "{{ config }}"
      delegate_to: localhost

    #- debug: var=storage_volumes
      
    - name: Capturing boot LUN size defined in the Server Profile to ensure that OS will be installed on this disk using the kickstart file
      set_fact:
        size: "{{ ((storage_volumes | selectattr('uri', 'equalto', lunuri) | map(attribute='provisionedCapacity') | list)[0] | int / (1024*1024*1024) ) |int}}"

    # - debug: var=size

# Creation of the kickstart file

    - name: Creating kickstart file with %pre script to detect the "{{ size }}GB" Boot From SAN volume
      template:
        src: files/{{ rhel_version }}/{{ kickstart }}
        dest: /opt/baremetal/{{ inventory_hostname }}/ks.cfg
      delegate_to: localhost

# Creation of the new RHEL ISO image with unattended installation  

    - name: Creating customized bootable ISO 
      shell: >
        mkisofs
        -V {{ iso_label }} 
        -J
        -R
        -l
        -v
        -b isolinux/isolinux.bin
        -c isolinux/boot.cat
        -no-emul-boot
        -boot-load-size 4
        -boot-info-table
        -eltorito-alt-boot
        -e images/efiboot.img
        -no-emul-boot
        -o /opt/baremetal/{{ inventory_hostname }}.iso
        -graft-points
        /opt/baremetal/{{ inventory_hostname }}/
      delegate_to: localhost
  
    - name: Implanting MD5 checksum into the ISO to make it bootable
      shell: |
        # Convert the ISO image to be compatible for a USB boot image
        isohybrid --uefi /opt/baremetal/{{ inventory_hostname }}.iso
        # Implant MD5 checksum into the ISO, if not done, ISO will not bootâ€¦
        implantisomd5 /opt/baremetal/{{ inventory_hostname }}.iso
      delegate_to: localhost

    - name: Creating /usr/share/nginx/html/isos/ on "{{lookup("pipe","hostname")}}" if it does not exist
      ansible.builtin.file:
        path: /usr/share/nginx/html/isos/
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Moving created ISO to the nginx default html folder of "{{lookup("pipe","hostname")}}" 
      shell: |
        mv /opt/baremetal/{{ inventory_hostname }}.iso /usr/share/nginx/html/isos/
      delegate_to: localhost

# Starting the OS unattended installation

    - name: Powering on and booting "{{ server_hardware_name }}" from created ISO using iLO Virtual Media 
      community.general.hpilo_boot:
        host: "{{ server_hardware.mpHostInfo.mpIpAddresses[1].address }}" 
        login: Administrator
        password: password
        media: cdrom
        image: 'http://{{lookup("pipe","hostname")}}/isos/{{ inventory_hostname }}.iso'
      delegate_to: localhost

    - name: Waiting for RHEL installation to complete - Waiting for "{{ host_management_ip }}" to respond...
      wait_for: 
        timeout: 1200 
        host: "{{ host_management_ip }}"
        port: 22
      delegate_to: localhost
      register: boot_wait_time
    
    - debug:
        msg: "{{ inventory_hostname }} installation took {{ (boot_wait_time.elapsed / 60) | round | int }} minutes"

# Cleaning up staging files

    - name: Deleting all temporary files in the stagging location on "{{lookup("pipe","hostname")}}" 
      file:
        path: "/opt/baremetal/{{ inventory_hostname }}"
        state: absent
      delegate_to: localhost

    - name: Deleting created ISO file in the web server directory on "{{lookup("pipe","hostname")}}" 
      file:
        path: "/usr/share/nginx/html/isos/{{ inventory_hostname }}.iso"
        state: absent
      delegate_to: localhost

    - name: Unmounting original ISO file on "{{lookup("pipe","hostname")}}" 
      file:
        path: "/mnt/{{ inventory_hostname }}"
        state: absent
      delegate_to: localhost

# Installing iSUT and AMS on the server for online installation of HPE drivers for RHEL

    - name: Copying HPE iSUT rpm file to {{ inventory_hostname }}
      copy:
        src: files/{{ rhel_version }}/{{ iSUT_package }}
        dest: /tmp/sut.rpm
        mode: 0755
 
    - name: Copying HPE AMS rpm file to {{ inventory_hostname }}
      copy:
        src: files/{{ rhel_version }}/{{ AMS_package }}
        dest: /tmp/amsd.rpm
        mode: 0755

    - name: Installing iSUT
      yum:
        name: /tmp/sut.rpm
        state: present
        disable_gpg_check: yes

    - name: Installing AMS
      yum:
        name: /tmp/amsd.rpm
        state: present
        disable_gpg_check: yes
 
    - name: Waiting for iSUT installation to complete 
      wait_for: 
        timeout: 60
      delegate_to: localhost

    - name: Configuring iSUT mode to allow OS driver updates via HPE OneView Server Profile
      command: 
        sut -set mode=autodeployÂ 
        #sut -set mode=AutoDeployReboot
        #sut -set mode=AutoStage
        #sut -set mode=OnDemand
      register: sut_status

    - debug: msg="{{ sut_status.stdout }}"

# Changing the OneView Server Profile to enable OS drivers installation using the SSP/SPP.    

    - name: Updating Server Profile to enable Firmware and OS Drivers using SUT
      oneview_server_profile:
        config: "{{ config }}"
        state: "present"
        data:
          name: "{{ inventory_hostname }}"
          firmware:
            firmwareInstallType: "FirmwareAndOSDrivers"
      delegate_to: localhost
      register: result

    - debug: msg="{{ result.msg }}"

# Waiting for HPE drivers to be installed

    - name: Monitoring SUT status for 'reboot the system' message
      oneview_server_hardware_facts:
        config: "{{ config }}"
        name: "{{ server_hardware.name }}"
      retries: 50
      delay: 30 
      until:  server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot"
      delegate_to: localhost
    
    # Better to use the server_hardwares.serverSettings data than parsing SUT status
    # - name: Monitoring SUT status for 'reboot the system' message
    #   shell: |
    #     sut -status | grep -i 'User Action Needed'
    #   register: sut_info
    #   until: "sut_info.stdout is search('Reboot the system')"
    #   retries: 50
    #   delay: 30    
    #- debug: msg={{ sut_info.stdout }}
    
# Rebooting host for the HPE drivers/firmware activation

    - name: Rebooting host for the HPE drivers/firmware activation and waiting for it to restart
      reboot:
        msg: "Reboot initiated by Ansible"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami

    - name: Displaying install completed message
      debug: 
        msg: 
         - '{{ inventory_hostname }}.{{domain}} Installation completed !'
         - 'OS is configured and running with HPE OS drivers.'
