#   Playbook for server unprovisioning:
#     - Put the ESXi server into maintenance mode
#     - Do some ESXi server cleanup
#     - Remove the server from vCenter
#     - Power off the server
#     - Delete the HPE OneView Server Profile
#     - Remove the DNS record
#     - Remove the host SSH key from .ssh/known_hosts on the Ansible control node
#
#   Commands that can be used to run this playbook:
#     $ ansible-playbook -i "RHEL-1," ESXi_unprovisioning.yml --ask-vault-password 
#     $ ansible-playbook -i "RHEL-1,ESX7-2" ESXi_unprovisioning.yml --ask-vault-password 
#     $ ansible-playbook -i hosts ESXi_unprovisioning.yml --ask-vault-password 

---
- name: Deleting provisioned compute module(s)
  hosts: all
  collections:
    - hpe.oneview
  gather_facts: no
  vars_files:
    - vars/ESXi7.0.u3_vars.yml
    - vars/VMware_vCenter_vars_encrypted.yml
  vars:
    # HPE Synergy Composer configuration
    config: "{{ playbook_dir }}/oneview_config.json"
    inventory_fqdn: "{{ inventory_hostname | lower }}.{{ domain }}"
    ansible_forks: 5

  tasks: 

    - name: Taking "{{ inventory_fqdn }}" to maintenance mode
      vmware_maintenancemode:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        esxi_hostname: "{{ inventory_fqdn }}"
        timeout: 3600
        state: present
        validate_certs: false
      delegate_to: localhost

    - name: Removing vmkernel mk1 port from "{{ vcenter_switch_name }}" distributed Switch
      community.vmware.vmware_vmkernel:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        esxi_hostname: "{{ inventory_fqdn }}"
        dvswitch_name: "{{ vcenter_switch_name }}"
        portgroup_name: "{{ dportgroup_name }}"
        state: absent
        device: vmk1
        validate_certs: False
      delegate_to: localhost
    
    - name: Gathering facts about vmnics 
      community.vmware.vmware_host_vmnic_info:
        hostname: '{{ vcenter_hostname }}'
        username: '{{ vcenter_username }}'
        password: '{{ vcenter_password }}'
        esxi_hostname: "{{ inventory_fqdn }}"
        validate_certs: false
      delegate_to: localhost
      register: host_vmnics

    #- debug: var=host_vmnics

    - name: Capturing available vmnics for the distributed switch creation
      set_fact:
        vmnics: "{{ host_vmnics.hosts_vmnics_info | json_query('\"' + inventory_fqdn + '\".dvswitch') }}"

    - name: Removing host from "{{ vcenter_switch_name }}" distributed Switch
      vmware_dvs_host:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        esxi_hostname: "{{ inventory_fqdn }}"
        switch_name: "{{ vcenter_switch_name }}"
        vmnics: "{{ vmnics |  json_query('\"' + vcenter_switch_name + '\"')   }} " 
        state: absent
        validate_certs: False
      delegate_to: localhost

    - name: Removing ESXi host "{{ inventory_hostname }}" from vCenter "{{ vcenter_hostname }}"
      vmware_host:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter_name: "{{ datacenter_name }}"
        cluster_name: "{{ cluster_name }}"
        esxi_hostname: "{{ inventory_fqdn }}"
        state: absent
        validate_certs: false
      delegate_to: localhost

    - name: Checking if server profile "{{ inventory_hostname }}" exists
      oneview_server_profile_facts:
        config: "{{ config }}"
        name: "{{ inventory_hostname }}"
      delegate_to: localhost

    # - debug: var=server_profiles
   
    - name : Getting server profile "{{ inventory_hostname }}" information
      oneview_server_profile:
         config: "{{ config }}"
         state: "present"
         data:
            name: "{{ inventory_hostname }}"
      delegate_to: localhost
      when: server_profiles

    # - debug: var=server_hardware

    - name: Powering off server hardware "{{ inventory_hostname }}"
      oneview_server_hardware:
        config: "{{ config }}"
        state: power_state_set
        data:
            name : "{{ server_hardware.name }}"
            powerStateData:
                powerState: "Off"
                powerControl: "PressAndHold"
      delegate_to: localhost
      when: server_profiles

    - name: Deleting server profile "{{ inventory_hostname }}"
      oneview_server_profile:
        config: "{{ config }}"
        state: "absent"
        data:
          name: "{{ inventory_hostname }}"
      delegate_to: localhost
      when: server_profiles
      register: result

    - name: Result of the task to delete the server profile
      debug:
        msg: "{{ result.msg }}"
      when: server_profiles

    - name: Removing {{ inventory_hostname }} SSH key 
      known_hosts:
        name: '{{ inventory_hostname }}'
        path: ~/.ssh/known_hosts
        state: absent
      delegate_to: localhost


- name: Removing the DNS record from DNS server
  hosts: all
  gather_facts: no
  vars:
    ansible_forks: 5
  vars_files:
    vars/Windows_DNS_vars_encrypted.yml
  tasks:
    - name: Removing "{{ inventory_hostname }}" from "{{ dns_server }}" 
      community.windows.win_dns_record:
        name: "{{ inventory_hostname }}"
        type: "A"
        zone: "{{ domain }}"
        state: absent
      delegate_to: "{{ dns_server }}" 

